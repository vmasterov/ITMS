stages:
  - test
  - build
  - deploy
  - version

sast:
  stage: test
include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

build:
  stage: build
  only:
    - master
    - develop
    - release
    - pipes
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint:
      - ''
  before_script:
    - export CR_PATH=$(echo "$CI_PROJECT_DIR" | awk -F'/' '{print "/"$(NF-1)"/"$NF}')
  script:
    - |
      if [ -z ${IMAGE_TAG+x} ]; then
        if [ "$CI_COMMIT_REF_NAME" = $CI_DEFAULT_BRANCH ]; then
            VERSION="latest"
          elif [ -n "$CI_COMMIT_TAG" ];then
            NOSLASH=$(echo "$CI_COMMIT_TAG" | tr -s / - )
            SANITIZED="${NOSLASH//[^a-zA-Z0-9.-]/}"
            VERSION="$SANITIZED"
          else \
            NOSLASH=$(echo "$CI_COMMIT_REF_NAME" | tr -s / - )
            SANITIZED="${NOSLASH//[^a-zA-Z0-9-]/}"
            VERSION="branch-$SANITIZED"
          fi
        export IMAGE_TAG=$CR_URL$CR_PATH:$VERSION
      fi

    - |
      echo ${IMAGE_TAG}
      mkdir -p /kaniko/.docker
      cp $CR_NEXUS_AUTH /kaniko/.docker/config.json
      /kaniko/executor --context "${CI_PROJECT_DIR}" --dockerfile "${CI_PROJECT_DIR}/Dockerfile" \
             --destination "$CR_URL$CR_PATH:${CI_COMMIT_REF_NAME}" --destination "${IMAGE_TAG}" --single-snapshot

deploy-job:
  only:
    - master
    - develop
    - release
  stage: deploy
  variables:
    UPSTREAM: $CI_COMMIT_REF_NAME
    PART: frontend
  trigger:
    project: main/trak-n-trace/p-tnt-deploy
    branch: master
    strategy: depend
# version:
#   stage: version
#   only:
#     - develop
#   image: debian:latest
#   resource_group: '$CI_COMMIT_REF_NAME'
#   script:
#     - |
#       command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )
#       eval $(ssh-agent -s)
#       echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#       mkdir -p ~/.ssh
#       chmod 700 ~/.ssh
#       apt-get update -y && apt-get install -qy git-core
#       git config core.sshCommand 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
#       git checkout $CI_COMMIT_REF_NAME
#       git remote set-url origin git@$CI_SERVER_HOST:$CI_PROJECT_PATH.git
#       git config --global user.email 'bot@b1.ru'
#       git config --global user.name 'Bot'
#       git config pull.rebase false
#       git pull --allow-unrelated-histories
#       ver=$(sed -n '1p' < release.txt)
#       printf -v ver '%s.%d' "${ver%.*}" "$((${ver##*.} + 1))"
#       echo -e "$ver\n$CI_COMMIT_SHORT_SHA" > release.txt
#       git add release.txt
#       git commit -m "Update version via CI"
#       git push -f origin $CI_COMMIT_REF_NAME -o ci.skip
